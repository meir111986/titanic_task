Задание: Построение модели для предсказания выживаемости пассажиров Титаника
Описание задания
Задача классификации основана на данных пассажиров Титаника, которые вы сможете загрузить с платформы Kaggle. Целью задания является построение модели машинного обучения, способной предсказать, выжил пассажир или нет на основании предоставленных характеристик.

Датасет: Titanic - Machine Learning from Disaster
Ссылка на датасет

Целевая переменная:
Целевой переменной для предсказания является колонка Survived:

1 — пассажир выжил;
0 — пассажир не выжил.
Признаки для анализа: В датасете содержится множество признаков, которые могут быть использованы для построения модели. Основные признаки включают:

Pclass: Класс обслуживания (1, 2 или 3)
Sex: Пол пассажира
Age: Возраст пассажира
SibSp: Количество родственников (братьев, сестер, супругов) на борту
Parch: Количество родителей/детей на борту
Ticket: Номер билета
Fare: Стоимость билета
Cabin: Номер каюты (если известен)
Embarked: Порт посадки (C — Cherbourg; Q — Queenstown; S — Southampton)
Этапы выполнения задания
Подготовка данных:

Загрузите датасет и ознакомьтесь с ним.
Проведите анализ данных, выявите пропуски и аномалии.
Преобразуйте категориальные переменные в числовые значения (например, пол, порт посадки).
Разделите выборку на тренировочную и тестовую (если не используете тренировочный и тестовый наборы с Kaggle).
Проведите масштабирование данных, если это необходимо.
Исследовательский анализ данных (EDA):

Проведите базовый анализ признаков.
Визуализируйте распределение пассажиров по классам, возрасту, полу и другим признакам.
Определите признаки, которые могут оказывать наибольшее влияние на выживаемость пассажиров.
Обучение моделей:

Постройте несколько моделей машинного обучения для решения задачи классификации:
Логистическая регрессия
Дерево решении
Оцените качество каждой модели с помощью метрик качества: точность (accuracy), полнота (recall), точность (precision), F1-меру.
Выполните кросс-валидацию для оценки устойчивости моделей.
Осуществите подбор гиперпараметров для улучшения качества модели (например, с помощью GridSearchCV или RandomizedSearchCV).
Оценка и интерпретация результатов:

Сравните модели между собой по качеству предсказаний.
Постройте матрицу ошибок (confusion matrix) для наиболее успешной модели.
Оцените важность признаков (feature importance) в финальной модели.
Финальное предсказание:

На основании лучшей модели, сделайте предсказания для тестового набора данных.
Сохраните предсказания в формате, соответствующем требованиям соревнования Kaggle, и загрузите на платформу для оценки.
Требования к выполнению задания:
Код должен быть хорошо структурирован:

Используйте ноутбук Jupyter (или аналог), чтобы представлять результаты на каждом этапе.
Добавляйте комментарии к коду и пояснения к выполненным действиям.
Технический отчет:

В конце задания опишите подход, который был использован.
Объясните, какие модели использовались и почему, а также прокомментируйте их результаты.
Приложите графики с EDA и визуализации важности признаков.
Метрики:

Обязательна оценка моделей по метрикам accuracy, precision, recall и F1-score.
Также должна быть представлена кросс-валидация и ее результаты.
Гиперпараметры:

Обязательно проведите настройку гиперпараметров для одной из моделей (например, случайного леса или градиентного бустинга).
Графики и визуализации:

Используйте библиотеки визуализации, такие как Matplotlib и Seaborn, для создания графиков (распределение признаков, корреляционные матрицы и т.д.).
Файл с предсказаниями:


Размещение на GitHub:

Создайте репозиторий на GitHub, где будет содержаться следующее:
Jupyter Notebook с вашим решением и кодом.
README.md с описанием проекта, инструкциями по запуску кода, установленным библиотекам и результатам анализа.
CSV файл с финальными предсказаниями для тестовой выборки.
(опционально) графики и отчеты в виде изображений.
Дополнительные советы:
В README.md постарайтесь структурировать материал так, чтобы стороннему разработчику было легко воспроизвести ваше решение.
Обязательно укажите версии библиотек, с которыми вы работали, и настройте файл requirements.txt для установки всех зависимостей через pip.
Рекомендации по оценке студентов:
Оценка качества модели: Как студенты справились с настройкой моделей и гиперпараметров? Приведены ли корректные метрики?
Качество и количество визуализаций: Выполнен ли полноценный анализ данных?
Чистота и структурированность кода: Есть ли комментарии, следуют ли студенты принципам чистого кода?
Знание теории: Студенты должны уметь объяснять, почему они выбрали ту или иную модель, а также как определенные признаки влияют на предсказание.